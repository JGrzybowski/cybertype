.wordsWrapper {
	flex-shrink: 1;
	flex-grow: 1;
	outline: none;
	overflow: hidden;
	display: flex;
	justify-content: center;
	position: relative;
	margin-bottom: 40px;
	max-height: 8em;
	line-height: 1.3;
	margin-top: auto;
	margin-bottom: auto;

	font-size: clamp(20px, 5.5vh, 60px);

	@media (max-width: 1000px) {
		font-size: 36px;
		max-height: 12em;
	}

	@media (max-width: 1600px) {
		font-size: clamp(20px, 4vh, 60px);
	}

	@media (max-width: 600px) {
		font-size: 26px;
	}

	// gradients for gradually showing the words
	&::before,
	&::after {
		content: '';
		position: absolute;
		height: 2em;
		width: 100%;
		left: 0;
		z-index: 2;
	}

	// top
	&::before {
		top: 0;
		background: linear-gradient(to bottom, var(--bg), transparent);
	}

	// bottom
	&::after {
		height: 2.5em;
		bottom: 0;
		background: linear-gradient(to top, var(--bg), transparent);
	}
}

.wordsScroll {
	position: relative;
	overflow: hidden;
}

.words {
	--top-offset: 2em;
	max-width: 50ch;
	text-align: center;
	will-change: transform;
	transform: translateY(calc(var(--depth, 0px) + var(--top-offset)));
	transition: transform 1s ease;
}

.word {
	margin-bottom: 10px;
	display: inline-flex;
	transition: all 50ms ease;
}

.character {
	padding: 0.03em;
	display: block;
	color: var(--secondary);
	--icon: var(--typed-char);
	transition: color 100ms ease;

	// space
	svg {
		transform: translateY(30%);
		width: 0.6em;
		height: 0.6em;
	}

	&.error {
		color: var(--error);
		--icon: var(--error);
		text-shadow: 0 0 0.5em var(--error);
	}

	&.current {
		animation: cursor 500ms ease infinite;
	}

	&.error.current {
		animation: cursor-error 200ms ease infinite;
	}
}

// active word character
.word.current .character:not(.error, .typed) {
	color: var(--active-word);
}

// typed character
.character.typed:not(.error),
.word.typed .character:not(.error) {
	color: var(--typed-char);
}

@keyframes cursor {
	0%,
	60% {
		background: var(--primary);
		color: var(--bg);
	}
	70%,
	100% {
		background: var(--bg);
		color: var(--primary);
	}
}

@keyframes cursor-error {
	0%,
	60% {
		background: var(--error);
		color: var(--bg);
	}
	70%,
	100% {
		background: var(--bg);
		color: var(--error);
	}
}

.hiddenInput {
	opacity: 0;
	position: absolute;
	top: 50%;
	z-index: -1;
	pointer-events: none;
}
